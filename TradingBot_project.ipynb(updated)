{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yonas255/AI-Formed_Trading-Bot/blob/main/TradingBot_project.ipynb(updated)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "eapsemCTf-CQ",
        "outputId": "e02161f2-0f2b-410d-9d54-c5f8e32f8648"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a0d1b097-0f6f-4e3f-9168-12a7b5a17409\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a0d1b097-0f6f-4e3f-9168-12a7b5a17409\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving .env to .env (2)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Loaded LSTM model and scaler from Google Drive.\n",
            "\n",
            "--- Run 1/6 ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 352ms/step\n",
            "📊 Sentiment Totals: Positive=142, Negative=77, Neutral=272\n",
            "📈 Sentiment Score: 0.1324\n",
            "🔮 Predicted BTC Price: $102777.59\n",
            "💰 Live BTC Price: $107578.00\n",
            "📢 Decision: HOLD\n",
            "📁 Logged trade to 'sentiment_trade_log.txt'\n",
            "📤 Logged to Google Sheet: ['2025-05-28 15:16:07', 'HOLD', '0.1324', '102777.59', '107578.00', '1000.00', '0.000000']\n",
            "⏳ Waiting 10 seconds...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Run 2/6 ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n",
            "📊 Sentiment Totals: Positive=141, Negative=77, Neutral=273\n",
            "📈 Sentiment Score: 0.1303\n",
            "🔮 Predicted BTC Price: $102777.59\n",
            "💰 Live BTC Price: $107548.00\n",
            "📢 Decision: HOLD\n",
            "📁 Logged trade to 'sentiment_trade_log.txt'\n",
            "📤 Logged to Google Sheet: ['2025-05-28 15:16:23', 'HOLD', '0.1303', '102777.59', '107548.00', '1000.00', '0.000000']\n",
            "⏳ Waiting 10 seconds...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Run 3/6 ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n",
            "📊 Sentiment Totals: Positive=141, Negative=77, Neutral=273\n",
            "📈 Sentiment Score: 0.1303\n",
            "🔮 Predicted BTC Price: $102777.59\n",
            "💰 Live BTC Price: $107548.00\n",
            "📢 Decision: HOLD\n",
            "📁 Logged trade to 'sentiment_trade_log.txt'\n",
            "📤 Logged to Google Sheet: ['2025-05-28 15:16:40', 'HOLD', '0.1303', '102777.59', '107548.00', '1000.00', '0.000000']\n",
            "⏳ Waiting 10 seconds...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Run 4/6 ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step\n",
            "📊 Sentiment Totals: Positive=141, Negative=77, Neutral=273\n",
            "📈 Sentiment Score: 0.1303\n",
            "🔮 Predicted BTC Price: $102777.59\n",
            "💰 Live BTC Price: $107548.00\n",
            "📢 Decision: HOLD\n",
            "📁 Logged trade to 'sentiment_trade_log.txt'\n",
            "📤 Logged to Google Sheet: ['2025-05-28 15:16:57', 'HOLD', '0.1303', '102777.59', '107548.00', '1000.00', '0.000000']\n",
            "⏳ Waiting 10 seconds...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Run 5/6 ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step\n",
            "📊 Sentiment Totals: Positive=141, Negative=77, Neutral=273\n",
            "📈 Sentiment Score: 0.1303\n",
            "🔮 Predicted BTC Price: $102777.59\n",
            "💰 Live BTC Price: $107548.00\n",
            "📢 Decision: HOLD\n",
            "📁 Logged trade to 'sentiment_trade_log.txt'\n",
            "📤 Logged to Google Sheet: ['2025-05-28 15:17:14', 'HOLD', '0.1303', '102777.59', '107548.00', '1000.00', '0.000000']\n",
            "⏳ Waiting 10 seconds...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Run 6/6 ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n",
            "WARNING:praw:It appears that you are using PRAW in an asynchronous environment.\n",
            "It is strongly recommended to use Async PRAW: https://asyncpraw.readthedocs.io.\n",
            "See https://praw.readthedocs.io/en/latest/getting_started/multiple_instances.html#discord-bots-and-asynchronous-environments for more info.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step\n",
            "📊 Sentiment Totals: Positive=141, Negative=77, Neutral=273\n",
            "📈 Sentiment Score: 0.1303\n",
            "🔮 Predicted BTC Price: $102777.59\n",
            "💰 Live BTC Price: $107548.00\n",
            "📢 Decision: HOLD\n",
            "📁 Logged trade to 'sentiment_trade_log.txt'\n",
            "📤 Logged to Google Sheet: ['2025-05-28 15:17:31', 'HOLD', '0.1303', '102777.59', '107548.00', '1000.00', '0.000000']\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x700 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "✅ Finished all runs successfully.\n"
          ]
        }
      ],
      "source": [
        "# ✅ Full updated crypto bot code with:\n",
        "# - Refined trading thresholds\n",
        "# - Predicted vs. actual BTC plot\n",
        "# - Save/load LSTM model and scaler\n",
        "\n",
        "import os\n",
        "from dotenv import load_dotenv\n",
        "import praw\n",
        "import requests\n",
        "from datetime import datetime, timedelta\n",
        "import time\n",
        "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
        "import matplotlib.pyplot as plt\n",
        "from sendgrid import SendGridAPIClient\n",
        "from sendgrid.helpers.mail import Mail\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import pickle\n",
        "from keras.models import Sequential, load_model\n",
        "from keras.layers import LSTM, Dense, Dropout\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "MODEL_PATH = \"/content/drive/MyDrive/crypto_Bot/lstm_model.h5\"\n",
        "SCALER_PATH = \"/content/drive/MyDrive/crypto_Bot/scaler.pkl\"\n",
        "\n",
        "# Google Sheets\n",
        "import gspread\n",
        "from oauth2client.service_account import ServiceAccountCredentials\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n",
        "load_dotenv()\n",
        "\n",
        "# --- Google Sheets Setup ---\n",
        "def setup_google_sheets(json_keyfile_path, sheet_id, worksheet_name=\"Sheet1\"):\n",
        "    scope = [\"https://spreadsheets.google.com/feeds\", \"https://www.googleapis.com/auth/spreadsheets\", \"https://www.googleapis.com/auth/drive\"]\n",
        "    creds = ServiceAccountCredentials.from_json_keyfile_name(json_keyfile_path, scope)\n",
        "    client = gspread.authorize(creds)\n",
        "    return client.open_by_key(sheet_id).worksheet(worksheet_name)\n",
        "\n",
        "def add_headers_if_needed(sheet):\n",
        "    try:\n",
        "        if not sheet.row_values(1):\n",
        "            sheet.append_row([\"Timestamp\", \"Action\", \"Sentiment Score\", \"Predicted BTC Price\", \"BTC Price (USD)\", \"USD Balance\", \"BTC Balance\"])\n",
        "    except Exception as e:\n",
        "        print(f\"⚠️ Error adding headers: {e}\")\n",
        "\n",
        "def log_trade_to_google_sheets(sheet, action, sentiment_score, predicted_price, btc_price, usd_balance, btc_balance):\n",
        "    row = [datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), action, f\"{sentiment_score:.4f}\", f\"{predicted_price:.2f}\", f\"{btc_price:.2f}\", f\"{usd_balance:.2f}\", f\"{btc_balance:.6f}\"]\n",
        "    sheet.append_row(row)\n",
        "\n",
        "# --- SendGrid Email Alert ---\n",
        "email_sent_today = 0\n",
        "EMAIL_LIMIT = 20\n",
        "\n",
        "def send_email_alert(subject, content):\n",
        "    global email_sent_today\n",
        "    if email_sent_today >= EMAIL_LIMIT: return\n",
        "    try:\n",
        "        sg = SendGridAPIClient(os.getenv(\"SENDGRID_API_KEY\"))\n",
        "        message = Mail(from_email=os.getenv(\"ALERT_EMAIL_FROM\"), to_emails=os.getenv(\"ALERT_EMAIL_TO\"), subject=subject, plain_text_content=content)\n",
        "        response = sg.send(message)\n",
        "        email_sent_today += 1\n",
        "        print(f\"📧 Email sent! Status: {response.status_code}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Email failed: {e}\")\n",
        "\n",
        "# --- Reddit Sentiment ---\n",
        "reddit = praw.Reddit(\n",
        "    client_id=os.getenv(\"REDDIT_CLIENT_ID\"),\n",
        "    client_secret=os.getenv(\"REDDIT_CLIENT_SECRET\"),\n",
        "    user_agent=os.getenv(\"REDDIT_USER_AGENT\")\n",
        ")\n",
        "analyzer = SentimentIntensityAnalyzer()\n",
        "\n",
        "# --- BTC Price ---\n",
        "def get_historical_btc_prices(days=180):\n",
        "    url = \"https://api.coingecko.com/api/v3/coins/bitcoin/market_chart\"\n",
        "    data = requests.get(url, params={\"vs_currency\": \"usd\", \"days\": days}).json()\n",
        "    df = pd.DataFrame(data[\"prices\"], columns=[\"timestamp\", \"price\"])\n",
        "    df['date'] = pd.to_datetime(df['timestamp'], unit='ms')\n",
        "    df.set_index('date', inplace=True)\n",
        "    return df['price']\n",
        "\n",
        "def get_real_btc_price():\n",
        "    try:\n",
        "        return requests.get(\"https://api.coingecko.com/api/v3/simple/price\", params={\"ids\": \"bitcoin\", \"vs_currencies\": \"usd\"}).json()['bitcoin']['usd']\n",
        "    except:\n",
        "        return 65000\n",
        "\n",
        "# --- LSTM Model ---\n",
        "def create_lstm_model(input_shape):\n",
        "    model = Sequential([\n",
        "        LSTM(50, return_sequences=True, input_shape=input_shape), Dropout(0.2),\n",
        "        LSTM(50), Dropout(0.2),\n",
        "        Dense(25), Dense(1)\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
        "    return model\n",
        "\n",
        "def prepare_data(prices, look_back=60):\n",
        "    scaler = MinMaxScaler()\n",
        "    scaled = scaler.fit_transform(prices.values.reshape(-1,1))\n",
        "    X, y = [], []\n",
        "    for i in range(look_back, len(scaled)):\n",
        "        X.append(scaled[i-look_back:i, 0])\n",
        "        y.append(scaled[i, 0])\n",
        "    X = np.array(X).reshape(-1, look_back, 1)\n",
        "    return X, np.array(y), scaler\n",
        "\n",
        "def train_or_load_model(prices):\n",
        "    look_back = 60\n",
        "    if os.path.exists(MODEL_PATH) and os.path.exists(SCALER_PATH):\n",
        "        model = load_model(MODEL_PATH)\n",
        "        scaler = pickle.load(open(SCALER_PATH, \"rb\"))\n",
        "        print(\"✅ Loaded LSTM model and scaler from Google Drive.\")\n",
        "    else:\n",
        "        print(\"🚀 Training LSTM model (first run)...\")\n",
        "        X, y, scaler = prepare_data(prices, look_back)\n",
        "        model = create_lstm_model((X.shape[1], 1))\n",
        "        model.fit(X, y, epochs=10, batch_size=32, verbose=1)\n",
        "        model.save(MODEL_PATH)\n",
        "        pickle.dump(scaler, open(SCALER_PATH, \"wb\"))\n",
        "        print(\"💾 Saved trained model and scaler to Google Drive.\")\n",
        "    return model, scaler, look_back\n",
        "\n",
        "\n",
        "def predict_next_day_price(model, scaler, recent_prices, look_back):\n",
        "    last_sequence = scaler.transform(recent_prices[-look_back:].values.reshape(-1,1))\n",
        "    X_test = np.array([last_sequence.flatten()]).reshape(1, look_back, 1)\n",
        "    return scaler.inverse_transform(model.predict(X_test))[0][0]\n",
        "\n",
        "# --- Initialize ---\n",
        "json_keyfile_path = \"credentials.json\"\n",
        "sheet_id = \"1whYmmYjQTddVyLiHJxuQl_95rXQPC2yvlrq5yP32JFo\"\n",
        "sheet = setup_google_sheets(json_keyfile_path, sheet_id)\n",
        "add_headers_if_needed(sheet)\n",
        "\n",
        "usd_balance = 1000.0\n",
        "btc_balance = 0.0\n",
        "historical_prices = get_historical_btc_prices()\n",
        "lstm_model, scaler, look_back = train_or_load_model(historical_prices)\n",
        "\n",
        "run_numbers, positive_list, negative_list, neutral_list = [], [], [], []\n",
        "predicted_prices, actual_prices = [], []\n",
        "\n",
        "for run in range(6):\n",
        "    print(f\"\\n--- Run {run+1}/6 ---\")\n",
        "    sentiment_score, pos, neg, neu = 0, 0, 0, 0\n",
        "    for sub in [\"Bitcoin\", \"CryptoCurrency\", \"CryptoMarkets\", \"Ethereum\", \"CryptoMoonShots\"]:\n",
        "        for post in reddit.subreddit(sub).hot(limit=100):\n",
        "            if not post.stickied:\n",
        "                score = analyzer.polarity_scores(post.title)[\"compound\"]\n",
        "                if score >= 0.05: pos += 1\n",
        "                elif score <= -0.05: neg += 1\n",
        "                else: neu += 1\n",
        "    sentiment_score = (pos - neg) / (pos + neg + neu)\n",
        "    run_numbers.append(run + 1); positive_list.append(pos); negative_list.append(neg); neutral_list.append(neu)\n",
        "\n",
        "    predicted_price = predict_next_day_price(lstm_model, scaler, historical_prices, look_back)\n",
        "    btc_price = get_real_btc_price()\n",
        "    predicted_prices.append(predicted_price); actual_prices.append(btc_price)\n",
        "\n",
        "    print(f\"📊 Sentiment Totals: Positive={pos}, Negative={neg}, Neutral={neu}\")\n",
        "    print(f\"📈 Sentiment Score: {sentiment_score:.4f}\")\n",
        "    print(f\"🔮 Predicted BTC Price: ${predicted_price:.2f}\")\n",
        "    print(f\"💰 Live BTC Price: ${btc_price:.2f}\")\n",
        "\n",
        "    action = \"HOLD\"\n",
        "    if sentiment_score > 0.3 and predicted_price > btc_price * 1.01 and usd_balance >= 100:\n",
        "        action = \"BUY\"; btc_bought = 100 / btc_price\n",
        "        usd_balance -= 100; btc_balance += btc_bought\n",
        "        average_buy_price = (average_buy_price * (btc_balance - btc_bought) + btc_price * btc_bought) / btc_balance\n",
        "        print(f\"✅ Bought {btc_bought:.6f} BTC at ${btc_price:.2f}\")\n",
        "    elif sentiment_score < -0.3 and predicted_price < btc_price * 0.99 and btc_balance >= 0.001:\n",
        "        action = \"SELL\"; usd_gained = 0.001 * btc_price\n",
        "        btc_balance -= 0.001; usd_balance += usd_gained\n",
        "        if btc_balance == 0:\n",
        "            average_buy_price = 0.0\n",
        "        print(f\"✅ Sold 0.001 BTC at ${btc_price:.2f}\")\n",
        "\n",
        "        # Stop-loss or take-profit\n",
        "    elif btc_balance >= 0.001:\n",
        "        if btc_price <= average_buy_price * 0.95:\n",
        "            action = \"STOP-LOSS\"; usd_gained = 0.001 * btc_price\n",
        "            btc_balance -= 0.001; usd_balance += usd_gained\n",
        "        elif btc_price >= average_buy_price * 1.10:\n",
        "            action = \"TAKE-PROFIT\"; usd_gained = 0.001 * btc_price\n",
        "            btc_balance -= 0.001; usd_balance += usd_gained\n",
        "    print(f\"📢 Decision: {action}\")\n",
        "\n",
        "    with open(\"sentiment_trade_log.txt\", \"a\") as f:\n",
        "        f.write(f\"{datetime.utcnow()} | Action: {action} | Sentiment: {sentiment_score:.4f} | Predicted BTC: ${predicted_price:.2f} | BTC: ${btc_price:.2f} | USD: ${usd_balance:.2f} | BTC Bal: {btc_balance:.6f}\\n\")\n",
        "    print(\"📁 Logged trade to 'sentiment_trade_log.txt'\")\n",
        "\n",
        "    log_trade_to_google_sheets(sheet, action, sentiment_score, predicted_price, btc_price, usd_balance, btc_balance)\n",
        "    print(f\"📤 Logged to Google Sheet: {[datetime.now().strftime('%Y-%m-%d %H:%M:%S'), action, f'{sentiment_score:.4f}', f'{predicted_price:.2f}', f'{btc_price:.2f}', f'{usd_balance:.2f}', f'{btc_balance:.6f}']}\")\n",
        "\n",
        "    if action in [\"BUY\", \"SELL\"]:\n",
        "        send_email_alert(f\"[Crypto Bot] {action} Signal\", f\"Action: {action}\\nSentiment: {sentiment_score:.4f}\\nPredicted: ${predicted_price:.2f}\\nBTC Now: ${btc_price:.2f}\")\n",
        "\n",
        "    if run < 5:\n",
        "        print(\"⏳ Waiting 10 seconds...\")\n",
        "        time.sleep(10)\n",
        "\n",
        "# --- Visualizations ---\n",
        "plt.figure(figsize=(7, 7))\n",
        "plt.pie([sum(positive_list), sum(negative_list), sum(neutral_list)], labels=['Positive','Negative','Neutral'], colors=['green','red','gray'], autopct='%1.1f%%', startangle=140)\n",
        "plt.title(\"Reddit Crypto Sentiment (6 Runs)\")\n",
        "plt.axis('equal')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(run_numbers, actual_prices, label=\"Actual BTC\", marker='o')\n",
        "plt.plot(run_numbers, predicted_prices, label=\"Predicted BTC\", marker='x')\n",
        "plt.xlabel(\"Run\")\n",
        "plt.ylabel(\"BTC Price (USD)\")\n",
        "plt.title(\"Predicted vs Actual BTC Prices\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"\\n✅ Finished all runs successfully.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lC2V2pfEfPlX",
        "outputId": "24358415-bcd3-4972-9aba-db81d0ac8344"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: textblob in /usr/local/lib/python3.11/dist-packages (0.19.0)\n",
            "Requirement already satisfied: nltk>=3.9 in /usr/local/lib/python3.11/dist-packages (from textblob) (3.9.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (8.2.1)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (1.5.0)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (2024.11.6)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (4.67.1)\n",
            "Collecting praw\n",
            "  Downloading praw-7.8.1-py3-none-any.whl.metadata (9.4 kB)\n",
            "Collecting prawcore<3,>=2.4 (from praw)\n",
            "  Downloading prawcore-2.4.0-py3-none-any.whl.metadata (5.0 kB)\n",
            "Collecting update_checker>=0.18 (from praw)\n",
            "  Downloading update_checker-0.18.0-py3-none-any.whl.metadata (2.3 kB)\n",
            "Requirement already satisfied: websocket-client>=0.54.0 in /usr/local/lib/python3.11/dist-packages (from praw) (1.8.0)\n",
            "Requirement already satisfied: requests<3.0,>=2.6.0 in /usr/local/lib/python3.11/dist-packages (from prawcore<3,>=2.4->praw) (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.6.0->prawcore<3,>=2.4->praw) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.6.0->prawcore<3,>=2.4->praw) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.6.0->prawcore<3,>=2.4->praw) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.6.0->prawcore<3,>=2.4->praw) (2025.4.26)\n",
            "Downloading praw-7.8.1-py3-none-any.whl (189 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m189.3/189.3 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading prawcore-2.4.0-py3-none-any.whl (17 kB)\n",
            "Downloading update_checker-0.18.0-py3-none-any.whl (7.0 kB)\n",
            "Installing collected packages: update_checker, prawcore, praw\n",
            "Successfully installed praw-7.8.1 prawcore-2.4.0 update_checker-0.18.0\n",
            "Collecting vaderSentiment\n",
            "  Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl.metadata (572 bytes)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from vaderSentiment) (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->vaderSentiment) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->vaderSentiment) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->vaderSentiment) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->vaderSentiment) (2025.4.26)\n",
            "Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl (125 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m126.0/126.0 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: vaderSentiment\n",
            "Successfully installed vaderSentiment-3.3.2\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.0.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Collecting ccxt\n",
            "  Downloading ccxt-4.4.86-py2.py3-none-any.whl.metadata (127 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.2/127.2 kB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: praw in /usr/local/lib/python3.11/dist-packages (7.8.1)\n",
            "Requirement already satisfied: textblob in /usr/local/lib/python3.11/dist-packages (0.19.0)\n",
            "Requirement already satisfied: setuptools>=60.9.0 in /usr/local/lib/python3.11/dist-packages (from ccxt) (75.2.0)\n",
            "Requirement already satisfied: certifi>=2018.1.18 in /usr/local/lib/python3.11/dist-packages (from ccxt) (2025.4.26)\n",
            "Requirement already satisfied: requests>=2.18.4 in /usr/local/lib/python3.11/dist-packages (from ccxt) (2.32.3)\n",
            "Requirement already satisfied: cryptography>=2.6.1 in /usr/local/lib/python3.11/dist-packages (from ccxt) (43.0.3)\n",
            "Requirement already satisfied: typing-extensions>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from ccxt) (4.13.2)\n",
            "Requirement already satisfied: aiohttp>=3.10.11 in /usr/local/lib/python3.11/dist-packages (from ccxt) (3.11.15)\n",
            "Collecting aiodns>=1.1.1 (from ccxt)\n",
            "  Downloading aiodns-3.4.0-py3-none-any.whl.metadata (4.7 kB)\n",
            "Requirement already satisfied: yarl>=1.7.2 in /usr/local/lib/python3.11/dist-packages (from ccxt) (1.20.0)\n",
            "Requirement already satisfied: prawcore<3,>=2.4 in /usr/local/lib/python3.11/dist-packages (from praw) (2.4.0)\n",
            "Requirement already satisfied: update_checker>=0.18 in /usr/local/lib/python3.11/dist-packages (from praw) (0.18.0)\n",
            "Requirement already satisfied: websocket-client>=0.54.0 in /usr/local/lib/python3.11/dist-packages (from praw) (1.8.0)\n",
            "Requirement already satisfied: nltk>=3.9 in /usr/local/lib/python3.11/dist-packages (from textblob) (3.9.1)\n",
            "Collecting pycares>=4.0.0 (from aiodns>=1.1.1->ccxt)\n",
            "  Downloading pycares-4.8.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.3 kB)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.10.11->ccxt) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.10.11->ccxt) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.10.11->ccxt) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.10.11->ccxt) (1.6.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.10.11->ccxt) (6.4.4)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.10.11->ccxt) (0.3.1)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.11/dist-packages (from cryptography>=2.6.1->ccxt) (1.17.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (8.2.1)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (1.5.0)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (2024.11.6)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk>=3.9->textblob) (4.67.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.18.4->ccxt) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.18.4->ccxt) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.18.4->ccxt) (2.4.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.12->cryptography>=2.6.1->ccxt) (2.22)\n",
            "Downloading ccxt-4.4.86-py2.py3-none-any.whl (5.7 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.7/5.7 MB\u001b[0m \u001b[31m57.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading aiodns-3.4.0-py3-none-any.whl (7.1 kB)\n",
            "Downloading pycares-4.8.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (626 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m626.2/626.2 kB\u001b[0m \u001b[31m40.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pycares, aiodns, ccxt\n",
            "Successfully installed aiodns-3.4.0 ccxt-4.4.86 pycares-4.8.0\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests) (2025.4.26)\n",
            "Collecting python-dotenv\n",
            "  Downloading python_dotenv-1.1.0-py3-none-any.whl.metadata (24 kB)\n",
            "Downloading python_dotenv-1.1.0-py3-none-any.whl (20 kB)\n",
            "Installing collected packages: python-dotenv\n",
            "Successfully installed python-dotenv-1.1.0\n",
            "Collecting sendgrid\n",
            "  Downloading sendgrid-6.12.2-py3-none-any.whl.metadata (12 kB)\n",
            "Collecting python-http-client>=3.2.1 (from sendgrid)\n",
            "  Downloading python_http_client-3.3.7-py3-none-any.whl.metadata (6.9 kB)\n",
            "Collecting ecdsa<1,>=0.19.1 (from sendgrid)\n",
            "  Downloading ecdsa-0.19.1-py2.py3-none-any.whl.metadata (29 kB)\n",
            "Requirement already satisfied: werkzeug>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from sendgrid) (3.1.3)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from ecdsa<1,>=0.19.1->sendgrid) (1.17.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=3.0.0->sendgrid) (3.0.2)\n",
            "Downloading sendgrid-6.12.2-py3-none-any.whl (102 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m102.1/102.1 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading ecdsa-0.19.1-py2.py3-none-any.whl (150 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m150.6/150.6 kB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading python_http_client-3.3.7-py3-none-any.whl (8.4 kB)\n",
            "Installing collected packages: python-http-client, ecdsa, sendgrid\n",
            "Successfully installed ecdsa-0.19.1 python-http-client-3.3.7 sendgrid-6.12.2\n",
            "Requirement already satisfied: gspread in /usr/local/lib/python3.11/dist-packages (6.2.1)\n",
            "Requirement already satisfied: oauth2client in /usr/local/lib/python3.11/dist-packages (4.1.3)\n",
            "Requirement already satisfied: google-auth>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from gspread) (2.38.0)\n",
            "Requirement already satisfied: google-auth-oauthlib>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from gspread) (1.2.2)\n",
            "Requirement already satisfied: httplib2>=0.9.1 in /usr/local/lib/python3.11/dist-packages (from oauth2client) (0.22.0)\n",
            "Requirement already satisfied: pyasn1>=0.1.7 in /usr/local/lib/python3.11/dist-packages (from oauth2client) (0.6.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.0.5 in /usr/local/lib/python3.11/dist-packages (from oauth2client) (0.4.2)\n",
            "Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from oauth2client) (4.9.1)\n",
            "Requirement already satisfied: six>=1.6.1 in /usr/local/lib/python3.11/dist-packages (from oauth2client) (1.17.0)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth>=1.12.0->gspread) (5.5.2)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib>=0.4.1->gspread) (2.0.0)\n",
            "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from httplib2>=0.9.1->oauth2client) (3.2.3)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (3.2.2)\n",
            "Requirement already satisfied: requests>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread) (2025.4.26)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.18.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.2.10)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (5.29.4)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.2.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.1.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.13.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.71.0)\n",
            "Requirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.18.0)\n",
            "Requirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.8.0)\n",
            "Requirement already satisfied: numpy<2.1.0,>=1.26.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.0.2)\n",
            "Requirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.13.0)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.0.9)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow) (0.15.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2025.4.26)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.8)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow) (2.19.1)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow) (0.1.2)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "!pip install textblob\n",
        "!pip install praw\n",
        "!pip install vaderSentiment\n",
        "!pip install matplotlib\n",
        "!pip install pandas\n",
        "!pip install ccxt praw textblob\n",
        "!pip install requests\n",
        "!pip install python-dotenv\n",
        "!pip install sendgrid\n",
        "!pip install --upgrade gspread oauth2client\n",
        "!pip install tensorflow\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1rkCXnY_gNE2"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM2Il8ejrOAp9p69DiQkw0n",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}